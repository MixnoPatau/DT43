from gensim.models import KeyedVectors
from scipy.spatial.distance import cosine

model_path = 'path_to_your_word2vec_model.bin' 
model = KeyedVectors.load_word2vec_format(model_path, binary=True)

words = ["māja", "dzīvoklis", "jūra"]

word_vectors = {}
for word in words:
    if word in model.key_to_index:
        word_vectors[word] = model[word]
        print(f"Vārda '{word}' vektors: {word_vectors[word][:5]}...")  
    else:
        print(f"Vārds '{word}' nav modelī!")

similarity_matrix = {}
for i, word1 in enumerate(words):
    for j, word2 in enumerate(words):
        if i < j:  
            similarity = 1 - cosine(word_vectors[word1], word_vectors[word2])
            similarity_matrix[(word1, word2)] = similarity
            print(f"Semantiskā līdzība starp '{word1}' un '{word2}': {similarity:.4f}")

most_similar = max(similarity_matrix, key=similarity_matrix.get)
print(f"\nVislielākā semantiskā līdzība ir starp '{most_similar[0]}' un '{most_similar[1]}' ar vērtību {similarity_matrix[most_similar]:.4f}")
